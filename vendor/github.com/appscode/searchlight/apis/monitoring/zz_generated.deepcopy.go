// +build !ignore_autogenerated

/*
Copyright 2017 The Searchlight Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package monitoring

import (
	reflect "reflect"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	SchemeBuilder.Register(RegisterDeepCopies)
}

// RegisterDeepCopies adds deep-copy functions to the given scheme. Public
// to allow building arbitrary schemes.
func RegisterDeepCopies(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedDeepCopyFuncs(
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_monitoring_ClusterAlert, InType: reflect.TypeOf(&ClusterAlert{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_monitoring_ClusterAlertList, InType: reflect.TypeOf(&ClusterAlertList{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_monitoring_ClusterAlertSpec, InType: reflect.TypeOf(&ClusterAlertSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_monitoring_NodeAlert, InType: reflect.TypeOf(&NodeAlert{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_monitoring_NodeAlertList, InType: reflect.TypeOf(&NodeAlertList{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_monitoring_NodeAlertSpec, InType: reflect.TypeOf(&NodeAlertSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_monitoring_PodAlert, InType: reflect.TypeOf(&PodAlert{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_monitoring_PodAlertList, InType: reflect.TypeOf(&PodAlertList{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_monitoring_PodAlertSpec, InType: reflect.TypeOf(&PodAlertSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_monitoring_Receiver, InType: reflect.TypeOf(&Receiver{})},
	)
}

// DeepCopy_monitoring_ClusterAlert is an autogenerated deepcopy function.
func DeepCopy_monitoring_ClusterAlert(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ClusterAlert)
		out := out.(*ClusterAlert)
		*out = *in
		if newVal, err := c.DeepCopy(&in.ObjectMeta); err != nil {
			return err
		} else {
			out.ObjectMeta = *newVal.(*v1.ObjectMeta)
		}
		if err := DeepCopy_monitoring_ClusterAlertSpec(&in.Spec, &out.Spec, c); err != nil {
			return err
		}
		return nil
	}
}

// DeepCopy_monitoring_ClusterAlertList is an autogenerated deepcopy function.
func DeepCopy_monitoring_ClusterAlertList(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ClusterAlertList)
		out := out.(*ClusterAlertList)
		*out = *in
		if in.Items != nil {
			in, out := &in.Items, &out.Items
			*out = make([]ClusterAlert, len(*in))
			for i := range *in {
				if err := DeepCopy_monitoring_ClusterAlert(&(*in)[i], &(*out)[i], c); err != nil {
					return err
				}
			}
		}
		return nil
	}
}

// DeepCopy_monitoring_ClusterAlertSpec is an autogenerated deepcopy function.
func DeepCopy_monitoring_ClusterAlertSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ClusterAlertSpec)
		out := out.(*ClusterAlertSpec)
		*out = *in
		if in.Receivers != nil {
			in, out := &in.Receivers, &out.Receivers
			*out = make([]Receiver, len(*in))
			for i := range *in {
				if err := DeepCopy_monitoring_Receiver(&(*in)[i], &(*out)[i], c); err != nil {
					return err
				}
			}
		}
		if in.Vars != nil {
			in, out := &in.Vars, &out.Vars
			*out = make(map[string]interface{})
			for key, val := range *in {
				if newVal, err := c.DeepCopy(&val); err != nil {
					return err
				} else {
					(*out)[key] = *newVal.(*interface{})
				}
			}
		}
		return nil
	}
}

// DeepCopy_monitoring_NodeAlert is an autogenerated deepcopy function.
func DeepCopy_monitoring_NodeAlert(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*NodeAlert)
		out := out.(*NodeAlert)
		*out = *in
		if newVal, err := c.DeepCopy(&in.ObjectMeta); err != nil {
			return err
		} else {
			out.ObjectMeta = *newVal.(*v1.ObjectMeta)
		}
		if err := DeepCopy_monitoring_NodeAlertSpec(&in.Spec, &out.Spec, c); err != nil {
			return err
		}
		return nil
	}
}

// DeepCopy_monitoring_NodeAlertList is an autogenerated deepcopy function.
func DeepCopy_monitoring_NodeAlertList(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*NodeAlertList)
		out := out.(*NodeAlertList)
		*out = *in
		if in.Items != nil {
			in, out := &in.Items, &out.Items
			*out = make([]NodeAlert, len(*in))
			for i := range *in {
				if err := DeepCopy_monitoring_NodeAlert(&(*in)[i], &(*out)[i], c); err != nil {
					return err
				}
			}
		}
		return nil
	}
}

// DeepCopy_monitoring_NodeAlertSpec is an autogenerated deepcopy function.
func DeepCopy_monitoring_NodeAlertSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*NodeAlertSpec)
		out := out.(*NodeAlertSpec)
		*out = *in
		if in.Selector != nil {
			in, out := &in.Selector, &out.Selector
			*out = make(map[string]string)
			for key, val := range *in {
				(*out)[key] = val
			}
		}
		if in.Receivers != nil {
			in, out := &in.Receivers, &out.Receivers
			*out = make([]Receiver, len(*in))
			for i := range *in {
				if err := DeepCopy_monitoring_Receiver(&(*in)[i], &(*out)[i], c); err != nil {
					return err
				}
			}
		}
		if in.Vars != nil {
			in, out := &in.Vars, &out.Vars
			*out = make(map[string]interface{})
			for key, val := range *in {
				if newVal, err := c.DeepCopy(&val); err != nil {
					return err
				} else {
					(*out)[key] = *newVal.(*interface{})
				}
			}
		}
		return nil
	}
}

// DeepCopy_monitoring_PodAlert is an autogenerated deepcopy function.
func DeepCopy_monitoring_PodAlert(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*PodAlert)
		out := out.(*PodAlert)
		*out = *in
		if newVal, err := c.DeepCopy(&in.ObjectMeta); err != nil {
			return err
		} else {
			out.ObjectMeta = *newVal.(*v1.ObjectMeta)
		}
		if err := DeepCopy_monitoring_PodAlertSpec(&in.Spec, &out.Spec, c); err != nil {
			return err
		}
		return nil
	}
}

// DeepCopy_monitoring_PodAlertList is an autogenerated deepcopy function.
func DeepCopy_monitoring_PodAlertList(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*PodAlertList)
		out := out.(*PodAlertList)
		*out = *in
		if in.Items != nil {
			in, out := &in.Items, &out.Items
			*out = make([]PodAlert, len(*in))
			for i := range *in {
				if err := DeepCopy_monitoring_PodAlert(&(*in)[i], &(*out)[i], c); err != nil {
					return err
				}
			}
		}
		return nil
	}
}

// DeepCopy_monitoring_PodAlertSpec is an autogenerated deepcopy function.
func DeepCopy_monitoring_PodAlertSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*PodAlertSpec)
		out := out.(*PodAlertSpec)
		*out = *in
		if newVal, err := c.DeepCopy(&in.Selector); err != nil {
			return err
		} else {
			out.Selector = *newVal.(*v1.LabelSelector)
		}
		if in.Receivers != nil {
			in, out := &in.Receivers, &out.Receivers
			*out = make([]Receiver, len(*in))
			for i := range *in {
				if err := DeepCopy_monitoring_Receiver(&(*in)[i], &(*out)[i], c); err != nil {
					return err
				}
			}
		}
		if in.Vars != nil {
			in, out := &in.Vars, &out.Vars
			*out = make(map[string]interface{})
			for key, val := range *in {
				if newVal, err := c.DeepCopy(&val); err != nil {
					return err
				} else {
					(*out)[key] = *newVal.(*interface{})
				}
			}
		}
		return nil
	}
}

// DeepCopy_monitoring_Receiver is an autogenerated deepcopy function.
func DeepCopy_monitoring_Receiver(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Receiver)
		out := out.(*Receiver)
		*out = *in
		if in.To != nil {
			in, out := &in.To, &out.To
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}
